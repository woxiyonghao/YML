name: iOS Egg Ci

on:
  push:
    branches: [ "main", "master", "dev" ]
  pull_request:
    branches: [ "main", "master", "dev" ]

jobs:
  build:
    name: Build and Test default scheme using real device
    runs-on: macos-latest
   
    steps:
      - name: Checkout
        uses: actions/checkout@v3


      # 将证书文件复制到工作目录
      #- name: Copy Certificate Files
        #run: |
          #cp /Users/a123456/Desktop/vs/p_12_apple.p12 $GITHUB_WORKSPACE/
          #cp  /Users/a123456/Desktop/资料/comxiaojibeyond.mobileprovision $GITHUB_WORKSPACE/

      - name: Check if build directory exists
        run: test -d build || mkdir build
        
      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat >default
          echo Using default scheme: $default
          
      # 检查是否已安装gem
      #- name: Check If Gemfile Exists
        #id: gemfile
        #run: |
          #if [ -f Gemfile ]; then
            #echo "Gemfile exists"
            #echo "::set-output name=need_gem_install::true"
          #else
            #echo "Gemfile does not exist"
            #echo "::set-output name=need_gem_install::false"
          #fi
      
      #- name: Install Ruby If Needed
        #if: steps.gemfile.outputs.need_gem_install == 'true'
        #run: |
          #sudo apt-get install -y ruby-full
          
      # 检查Podfile
      #- name: Check If Podfile Exists
        #id: podfile
        #run: |
          #if [ -f Podfile ]; then
            #echo "Podfile exists"
            #echo "::set-output name=need_pod_install::true"
          #else
            #echo "Podfile does not exist"
            #echo "::set-output name=need_pod_install::false"
          #fi
          
      # 是否安装cocoapod，pod 更新整体。(需运行一次update)
      #- name: Install CocoaPods If Needed
        #if: steps.podfile.outputs.need_pod_install == 'true'
        #run: |
          #sudo gem install cocoapods
          #pod update
     
      #- name: Clean Build App
        #env:
          #scheme: ${{ 'default' }}
        #run: |
          #if [ $scheme = default ]; then scheme=$(cat default); fi
          #if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          #file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          #xcodebuild clean build -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -verbose -allowProvisioningUpdates CODE_SIGN_IDENTITY="${{ secrets.CERTIFICATE_P12_BASE64 }}" PROVISIONING_PROFILE="${{ secrets.PROVISIONING_PROFILE_BASE64 }}"


        
      - name: Unlock Keychain And Set Signing Environment Variables
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          #KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          #CERTIFICATE_P12_BASE64: ${{ secrets.CERTIFICATE_P12_BASE64}}
          #PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
          #CERTIFICATE_ADHOC_P12_BASE64: ${{ secrets.CERTIFICATE_ADHOC_P12_BASE64 }}
          #---------
          KEYCHAIN_PASSWORD: ${{ secrets.XIAOJI }}
          IOS_DISTRIBUTION_CET_APPLE: ${{ secrets.IOS_DISTRIBUTION_CET_APPLE }}
          PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
          BUNDLE_ID: com.xiaoji.beyond
          TEAM_ID: 2V8DDU6RFC

        run: |
          #security unlock-keychain -p "$KEYCHAIN_PASSWORD" 
          #export CODE_SIGN_IDENTITY="$CERTIFICATE_ADHOC_P12_BASE64"
          #export PROVISIONING_PROFILE="$PROVISIONING_PROFILE_BASE64"
          #---------
          security unlock-keychain -p "$KEYCHAIN_PASSWORD"
          export CODE_SIGN_IDENTITY="$IOS_DISTRIBUTION_CET_APPLE"
          export PROVISIONING_PROFILE="$PROVISIONING_PROFILE_BASE64"
          export BUNDLE_ID="$BUNDLE_ID"
          export TEAM_ID="$TEAM_ID"
          # 解码证书和描述文件
          echo $IOS_DISTRIBUTION_CET_APPLE | base64 --decode > IOS_DISTRIBUTION_CET_APPLE.p12
          echo $PROVISIONING_PROFILE_BASE64 | base64 --decode > provisioning_profile.mobileprovision
          security list-keychains
          # 导入证书到钥匙串之前先检查是否已存在相同的证书，如果存在则删除
          existing_certificate=$(security find-certificate -c "$GITHUB_WORKSPACE/p_12_apple.p12" -a -Z ~/Library/Keychains/login.keychain-db)
          if [ -n "$existing_certificate" ]; then
          echo "Existing certificate found. Deleting..."
          sudo security delete-certificate -c "" ~/Library/Keychains/login.keychain-db
          else
          echo "Existing certificate not found. "
          fi
          security find-certificate -a -c "$GITHUB_WORKSPACE/p_12_apple.p12" -Z ~/Library/Keychains/login.keychain-db
          
          # 导入证书到钥匙串
          sudo security import "$GITHUB_WORKSPACE/p_12_apple.p12" -P $KEYCHAIN_PASSWORD -A -t cert -f pkcs12 -k ~/Library/Keychains/login.keychain-db
          
          
      #- name: Archive App
        #env:
           #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
           #CERTIFICATE_P12_BASE64: ${{ secrets.CERTIFICATE_P12_BASE64}}
           #PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
           #CERTIFICATE_ADHOC_P12_BASE64: ${{ secrets.CERTIFICATE_ADHOC_P12_BASE64 }}
           #---------
           #KEYCHAIN_PASSWORD: ${{ secrets.XIAOJI }}
           #IOS_DISTRIBUTION_CET_APPLE: ${{ secrets.IOS_DISTRIBUTION_CET_APPLE }}
           #PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
           #scheme: ${{ 'default' }}
        #run: |
          #if [ $scheme = default ]; then scheme=$(cat default); fi
          #if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          #file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          #xcodebuild archive -workspace "$scheme".xcworkspace -scheme "$scheme" -archivePath build/"$scheme".xcarchive CODE_SIGN_IDENTITY="$CERTIFICATE_ADHOC_P12_BASE64" PROVISIONING_PROFILE="$PROVISIONING_PROFILE_BASE64" 
          #xcodebuild archive -workspace "$scheme".xcworkspace -scheme "$scheme" -archivePath build/"$scheme".xcarchive CODE_SIGN_IDENTITY="$IOS_DISTRIBUTION_CET_APPLE" PROVISIONING_PROFILE="$PROVISIONING_PROFILE_BASE64"
          
      - name: Export IPA
        id: export_ipa
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          #KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          #CERTIFICATE_P12_BASE64: ${{ secrets.CERTIFICATE_P12_BASE64}}
          #PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
          #----------
          KEYCHAIN_PASSWORD: ${{ secrets.XIAOJI }}
          IOS_DISTRIBUTION_CET_APPLE: ${{ secrets.IOS_DISTRIBUTION_CET_APPLE }}
          PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
          scheme: ${{ 'default' }}
        run: |
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          #xcodebuild -exportArchive -archivePath build/"$scheme".xcarchive -exportPath build -exportOptionsPlist .github/workflows/ExportOptions.plist CODE_SIGN_IDENTITY="$CERTIFICATE_P12_BASE64" PROVISIONING_PROFILE="$PROVISIONING_PROFILE_BASE64"
          #export_path=$(xcodebuild -exportArchive -archivePath build/"$scheme".xcarchive -exportPath build -exportOptionsPlist .github/workflows/ExportOptions.plist CODE_SIGN_IDENTITY="$CERTIFICATE_ADHOC_P12_BASE64" PROVISIONING_PROFILE="$PROVISIONING_PROFILE_BASE64" | grep -o 'Exported to .*\.ipa' | cut -d ' ' -f 3)
          #export_path=$(xcodebuild -exportArchive -archivePath build/"$scheme".xcarchive -exportPath build -exportOptionsPlist .github/workflows/ExportOptions.plist CODE_SIGN_IDENTITY="$CERTIFICATE_ADHOC_P12_BASE64" PROVISIONING_PROFILE="$PROVISIONING_PROFILE_BASE64" | grep -o 'Exported to .*\.ipa' | cut -d ' ' -f 3)
          export_path=$(xcodebuild -exportArchive -archivePath build/"$scheme".xcarchive -exportPath build -exportOptionsPlist .github/workflows/ExportOptions.plist CODE_SIGN_IDENTITY="$IOS_DISTRIBUTION_CET_APPLE" PROVISIONING_PROFILE="$PROVISIONING_PROFILE_BASE64" | grep -o 'Exported to .*\.ipa' | cut -d ' ' -f 3) 
          #echo "::set-output name=ipa_path::$export_path"
          
      - name: Get IPA Path
        env:
          ipa_path: ${{ steps.export_ipa.outputs.ipa_path }}

        run: |
           echo "The IPA file is located at: $ipa_path"
           echo "path : ${GITHUB_WORKSPACE}/build/"
           ls -l ${GITHUB_WORKSPACE}/build/
