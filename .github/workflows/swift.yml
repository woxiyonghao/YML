name: Egg iOS CI

on:
  push:
    branches: [ "main", "master", "dev" ]
  pull_request:
    branches: [ "main", "master", "dev" ]

jobs:
  build:
    name: Build Archive Export App And Notify Dingtalk
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat >default
          echo Using default scheme: $default

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Check If Build Directory Exists
        run: | 
          test -d build || mkdir build
      # 检查是否已安装gem
      #- name: Check If Gemfile Exists
        #id: gemfile
        #run: |
          #if [ -f Gemfile ]; then
            #echo "Gemfile exists"
            #echo "::set-output name=need_gem_install::true"
          #else
            #echo "Gemfile does not exist"
            #echo "::set-output name=need_gem_install::false"
          #fi
      
      #- name: Install Ruby If Needed
        #if: steps.gemfile.outputs.need_gem_install == 'true'
        #run: |
          ##sudo apt-get install -y ruby-full
          
      # 检查Podfile
      #- name: Check If Podfile Exists
        #id: podfile
        #run: |
          #if [ -f Podfile ]; then
            #echo "Podfile exists"
            #echo "::set-output name=need_pod_install::true"
          #else
            #echo "Podfile does not exist"
            #echo "::set-output name=need_pod_install::false"
          #fi
          
      # 是否安装cocoapod，pod 更新整体。(需运行一次update)
      #- name: Install CocoaPods If Needed
        #if: steps.podfile.outputs.need_pod_install == 'true'
        #run: |
          #sudo gem install cocoapods
          #pod update
     
      #- name: Clean Build App
        #env:
          #scheme: ${{ 'default' }}
        #run: |
          #if [ $scheme = default ]; then scheme=$(cat default); fi
          #if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          #file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          #xcodebuild clean build -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -verbose -allowProvisioningUpdates CODE_SIGN_IDENTITY="${{ secrets.CERTIFICATE_P12_BASE64 }}" PROVISIONING_PROFILE="${{ secrets.PROVISIONING_PROFILE_BASE64 }}"

      #- name: Unlock Keychain And Set Signing Environment Variables
        #env:
          #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          #KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          #CERTIFICATE_P12_BASE64: ${{ secrets.CERTIFICATE_P12_BASE64}}
          #PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
        #run: |
          #security unlock-keychain -p "$KEYCHAIN_PASSWORD"
          #export CODE_SIGN_IDENTITY="$CERTIFICATE_P12_BASE64"
          #export PROVISIONING_PROFILE="$PROVISIONING_PROFILE_BASE64"
        
          
      #- name: Archive App
        #env:
           #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
           #CERTIFICATE_P12_BASE64: ${{ secrets.CERTIFICATE_P12_BASE64}}
           #PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
           #scheme: ${{ 'default' }}
        #run: |
          #if [ $scheme = default ]; then scheme=$(cat default); fi
          #if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          #file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          #xcodebuild archive -workspace "$scheme".xcworkspace -scheme "$scheme" -archivePath build/"$scheme".xcarchive CODE_SIGN_IDENTITY="$CERTIFICATE_P12_BASE64" PROVISIONING_PROFILE="$PROVISIONING_PROFILE_BASE64"
          
      - name: Export IPA
        id: export_ipa
        env:
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CERTIFICATE_P12_BASE64: ${{ secrets.CERTIFICATE_P12_BASE64}}
          PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
          scheme: ${{ 'default' }}
        run: |
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          #xcodebuild -exportArchive -archivePath build/"$scheme".xcarchive -exportPath build -exportOptionsPlist .github/workflows/ExportOptions.plist CODE_SIGN_IDENTITY="$CERTIFICATE_P12_BASE64" PROVISIONING_PROFILE="$PROVISIONING_PROFILE_BASE64"
          export_path=$(xcodebuild -exportArchive -archivePath build/"$scheme".xcarchive -exportPath "${GITHUB_WORKSPACE}/build" -exportOptionsPlist .github/workflows/ExportOptions.plist CODE_SIGN_IDENTITY="$CERTIFICATE_P12_BASE64" PROVISIONING_PROFILE="$PROVISIONING_PROFILE_BASE64" | grep -o 'Exported to .*\.ipa' | cut -d ' ' -f 3)
          echo "::set-output name=ipa_path::$export_path"
          echo "export_path : ${{ export_path }}"

          
      - name: Get IPA Path
        run: |
           echo "The IPA file is located at: ${GITHUB_WORKSPACE}/build/${{ github.event.repository.name }}-${{ github.sha }}.ipa"
           echo "export_path : ${{ steps.export_ipa.output.export_ipa }}"

      - name: Check if a file exists at a specific path
        run:  |
          test -f ${{ GITHUB_WORKSPACE }}/build/${{ github.event.repository.name }}-${{ github.sha }}.ipa && echo "File exists" || echo "File does not exist"
  
      - name: Check build result
        if: success()
        run: |
          echo "BUILD_SUCCESS=true" >> $GITHUB_ENV
          
     
